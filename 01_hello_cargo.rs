// 01_hello_cargo.rs
// 核心内容：介绍Cargo，Rust的构建工具和包管理器。

/*
 * =====================================================================================
 * 核心概念讲解 (Comments Section)
 * =====================================================================================
 *
 * 欢迎来到Rust的世界！在你开始编写复杂的程序之前，首先需要认识一下你最得力的助手：Cargo。
 *
 * 1. 什么是Cargo？
 *    Cargo是Rust语言官方的构建系统和包管理器。可以把它想象成Node.js的npm/yarn，或者Python的pip/poetry。
 *    它能帮你处理很多繁琐的任务，包括：
 *    - 创建项目 (cargo new)
 *    - 构建项目 (cargo build)
 *    - 运行项目 (cargo run)
 *    - 检查代码 (cargo check)
 *    - 管理依赖 (自动下载并编译第三方库)
 *    - 运行测试 (cargo test)
 *    - 生成文档 (cargo doc)
 *    - 发布库 (cargo publish)
 *
 * 2. 为什么要使用Cargo？
 *    - 标准化：几乎所有的Rust项目都使用Cargo，这意味着你一旦学会，就能轻松上手任何Rust项目。
 *    - 依赖管理：手动管理库的版本和依赖关系是一场噩梦。Cargo会为你处理好这一切。
 *    - 约定优于配置：Cargo为项目结构设定了一套标准约定（例如，源代码放在`src`目录，`main.rs`是程序入口）。
 *      这使得项目结构清晰，易于理解。
 *
 * 3. Cargo项目结构
 *    当你运行 `cargo new project_name` 时，Cargo会为你生成如下结构：
 *
 *    project_name/
 *    ├── .git/               # Git版本控制（可选，但推荐）
 *    ├── .gitignore          # Git忽略文件
 *    ├── Cargo.toml          # 项目的配置文件（元数据、依赖等）
 *    └── src/
 *        └── main.rs         # 项目的源代码入口
 *
 *    `Cargo.toml` 文件是Cargo项目的核心。TOML是一种简单的配置格式。
 *    一个典型的 `Cargo.toml` 文件看起来像这样：
 *
 *    [package]
 *    name = "project_name"
 *    version = "0.1.0"
 *    edition = "2021"
 *
 *    [dependencies]
 *    # 在这里添加你的第三方库，例如：
 *    # rand = "0.8.5"
 *
 * 4. 常用命令
 *    - `cargo new my_project`: 创建一个新的二进制（可执行）应用程序项目。
 *    - `cargo new --lib my_library`: 创建一个新的库项目。
 *    - `cargo build`: 编译项目。会在 `target/debug/` 目录下生成可执行文件。
 *    - `cargo build --release`: 以优化方式编译项目，用于发布。可执行文件在 `target/release/`。
 *    - `cargo run`: 编译并运行项目。
 *    - `cargo check`: 快速检查代码，确保它能通过编译，但不生成可执行文件。这比`cargo build`快得多。
 *
 */

// =====================================================================================
// 代码示例 (Code Section)
// =====================================================================================

fn main() {
    // `println!` 是一个宏 (macro)，用于将文本打印到控制台。
    // `!` 符号是宏的标志。现在你只需要知道它能打印东西就行。
    // 我们将在后续课程中深入学习宏。
    println!("Hello World!");

    // Cargo项目默认的入口文件就是 `src/main.rs`，而 `main` 函数是程序的起点。
    // 当你运行 `cargo run` 时，Cargo会先编译这段代码，然后执行生成的程序。
    // 程序的输出就是上面这行 "Hello, Cargo!..."
}

/*
 * =====================================================================================
 * 练习挑战 (Challenge Section)
 * =====================================================================================
 *
 * 1. 修改代码：
 *    尝试修改 `println!` 宏中的字符串，让程序打印出你自己的欢迎信息。
 *    然后再次使用 `cargo run` 命令，看看输出是否发生了变化。
 *
 * 2. 探索Cargo命令：
 *    - 在你的终端里，只运行 `cargo build`。然后找到 `target/debug/` 目录，
 *      看看是否能找到并直接运行你项目的可执行文件。
 *    - 运行 `cargo check`，感受一下它比 `cargo build` 快多少。
 *
 */