// 05_functions.rs
// 核心内容：如何定义和调用函数，函数参数的声明，以及函数的返回值。讲解语句和表达式的区别。

/*
 * =====================================================================================
 * 核心概念讲解 (Comments Section)
 * =====================================================================================
 *
 * 函数在Rust代码中无处不在。你已经见过了最重要的函数：`main` 函数，它是程序的入口点。
 * 现在我们来学习如何定义自己的函数。
 *
 * 1. 定义函数
 *    - 我们使用 `fn` 关键字来声明一个新函数。
 *    - Rust代码使用蛇形命名法（snake_case）作为函数和变量名的规范。
 *    - 例如: `fn my_function() { ... }`
 *
 * 2. 函数参数 (Parameters)
 *    - 函数可以被定义为拥有参数，参数是函数签名中的一部分。
 *    - 在函数签名中，你必须显式地声明每个参数的类型。这是Rust设计中深思熟虑的决定，
 *      因为它能帮助编译器给你提供更有用的错误提示。
 *    - 例如: `fn print_value(x: i32) { ... }`
 *
 * 3. 语句 (Statements) vs 表达式 (Expressions)
 *    - 这是Rust中一个非常核心且重要的概念！
 *    - 语句 (Statements) 是执行某些操作但不返回值的指令。
 *      例如, `let y = 6;` 是一个语句。它不返回值。
 *    - 表达式 (Expressions) 会计算并产生一个值。
 *      例如, `5 + 6` 是一个表达式，它计算出的值是 `11`。
 *      函数调用是一个表达式。宏调用是一个表达式。我们用 `{}` 创建的新作用域块也是一个表达式。
 *    - 关键区别：语句以分号 `;` 结尾。如果你在一个表达式末尾加上分号，它就变成了一个语句。
 *      `let y = (let x = 3);` // 这是非法的，因为 `let x = 3` 是一个语句，不返回值。
 *
 * 4. 函数的返回值 (Return Values)
 *    - 函数可以向调用它的代码返回值。
 *    - 我们不为返回值命名，但必须在箭头 `->` 后面声明它的类型。
 *    - 在Rust中，函数的返回值等同于函数体最后一个表达式的值。
 *    - 你可以使用 `return` 关键字提前从函数中返回，但这在Rust中并不常用。
 *      习惯用法是依赖函数体最后一个表达式作为隐式返回值。
 *    - 注意：作为返回值的最后一个表达式，其末尾不能有分号！否则它会变成语句，返回一个空元组 `()`。
 *
 */

// =====================================================================================
// 代码示例 (Code Section)
// =====================================================================================

fn main() {
    println!("Hello from main function!");

    // 调用我们定义的另一个函数
    another_function();

    // 调用带参数的函数
    print_labeled_measurement(5, 'h');

    // 语句和表达式的演示
    // `let y = 6;` 是一个语句，它不返回值。
    // 下面的 `{}` 块是一个表达式，它计算出的值是 4
    let y = {
        let x = 3;
        x + 1 // 注意这里没有分号！所以这个块的值是 x + 1
    };
    println!("The value of y from the expression block is: {}", y);

    // 调用带返回值的函数
    let five = five();
    println!("The value from five() is: {}", five);

    let x = plus_one(10);
    println!("The value of x from plus_one(10) is: {}", x);
}

// 一个简单的无参数、无返回值的函数
fn another_function() {
    println!("Hello from another function!");
}

// 一个带参数的函数
// 必须为每个参数指定类型
fn print_labeled_measurement(value: i32, unit_label: char) {
    println!("The measurement is: {}{}", value, unit_label);
}

// 一个带返回值的函数
// `-> i32` 表示这个函数返回一个 i32 类型的值
fn five() -> i32 {
    5 // 这是一个表达式，它的值将作为函数的返回值
}

// 另一个带参数和返回值的函数
fn plus_one(x: i32) -> i32 {
    x + 1 // 同样，没有分号，这个表达式的值被返回
    // `return x + 1;` 效果相同，但不是惯用法
}

/*
 * =====================================================================================
 * 练习挑战 (Challenge Section)
 * =====================================================================================
 *
 * 1. 华氏度到摄氏度的转换:
 *    编写一个名为 `fahrenheit_to_celsius` 的函数，它接受一个 `f64` 类型的华氏度温度，
 *    并返回转换后的 `f64` 类型的摄氏度温度。
 *    转换公式是: C = (F - 32) * 5/9。
 *    在 `main` 函数中调用它并打印结果。
 *
 * 2. 修复返回值错误:
 *    下面的函数有一个错误，导致它无法正确返回 `i32` 类型的值。请移除一个字符来修复它。
 *
 *    fn get_number() -> i32 {
 *        let number = 42;
 *        number; // 问题在这里！
 *    }
 *
 */